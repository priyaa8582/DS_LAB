#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define MAX_SIZE 100
typedef struct {
    int top;
    char items[MAX_SIZE];
} Stack;
void push(Stack *s, char c);
char pop(Stack *s);
char peek(Stack *s);
int is_operator(char c);
int precedence(char c);

int main() {
    char infix[MAX_SIZE], postfix[MAX_SIZE];
    int i, j;
    Stack s;
    s.top = -1;
    printf("Enter a valid parenthesized infix arithmetic expression: ");
    scanf("%s", infix);
    for (i = 0, j = 0; infix[i] != '\0'; i++) {
        if (infix[i] == '(') {
            push(&s, infix[i]);
        } else if (infix[i] == ')') {
            while (peek(&s) != '(') {
                postfix[j++] = pop(&s);
            }
            pop(&s); 
        } else if (isalnum(infix[i])) {
            postfix[j++] = infix[i];
        } else if (is_operator(infix[i])) {
            while (precedence(infix[i]) <= precedence(peek(&s))) {
                postfix[j++] = pop(&s);
            }
            push(&s, infix[i]);
        } else {
            printf("Invalid input\n");
            exit(1);
        }
}
    while (s.top != -1) {
        postfix[j++] = pop(&s);
    }
    postfix[j] = '\0';
    printf("The postfix expression is: %s\n", postfix);

    return 0;
}
void push(Stack *s, char c) {
    if (s->top == MAX_SIZE - 1) {
        printf("Stack overflow\n");
        exit(1);
    }
    s->items[++(s->top)] = c;
}
char pop(Stack *s) {
    if (s->top == -1) {
        printf("Stack underflow\n");
        exit(1);
    }
    return s->items[(s->top)--];
}
char peek(Stack *s) {
    if (s->top == -1) {
        return '('; 
    }
    return s->items[s->top];
}
int is_operator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}
int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    } else {
        return 0;
    }
}
