12) #include <stdio.h>
#include <stdlib.h>
struct node { int data;
struct node *left;
struct node *right;};
struct node* newNode(int data) {
struct node* node = (struct node*)malloc(sizeof(struct node));
node->data = data;node->left = NULL;
node->right = NULL;
return node;}
struct node* insert(struct node* node, int data) {
if (node == NULL) {
return newNode(data); }
if (data < node->data) {
node->left = insert(node->left, data);
} else if (data > node->data) {
node->right = insert(node->right, data); }
return node;}
void inorderTraversal(struct node* node) {
if (node == NULL) {return; }
inorderTraversal(node->left);
printf("%d ", node->data);
inorderTraversal(node->right);}
void preorderTraversal(struct node* node) {
if (node == NULL) {return; }
printf("%d ", node->data);
preorderTraversal(node->left);
preorderTraversal(node->right);}
void postorderTraversal(struct node* node) {
if (node == NULL) {return; }
postorderTraversal(node->left);
postorderTraversal(node->right);
printf("%d ", node->data);}
int main() {
struct node* root = NULL;
root = insert(root, 50);
insert(root, 30); insert(root, 20);
insert(root, 40);insert(root, 70);
insert(root, 60); insert(root, 80);
printf("In-order traversal: ");
inorderTraversal(root);
printf("\n");
printf("Pre-order traversal: ");
preorderTraversal(root);
printf("\n");
printf("Post-order traversal: ");
postorderTraversal(root);
printf("\n");return 0;}
