#include <stdlib.h>
#define MAX_SIZE 5
struct Queue {
int data;};
struct Queue circular_queue[MAX_SIZE];
int front = -1, rear = -1;
void enqueue(int element) {
if ((front == 0 && rear == MAX_SIZE-1) ||
(rear == (front-1)%(MAX_SIZE-1))) {
printf("Queue is full.\n");
return; }
else if (front == -1) {
front = rear = 0;
circular_queue[rear].data = element; }
else if (rear == MAX_SIZE-1 && front != 0) {
rear = 0;
circular_queue[rear].data = element; }
else { rear++;
circular_queue[rear].data = element; }}
int dequeue() {
if (front == -1) {
printf("Queue is empty.\n");
return -1; }
int element = circular_queue[front].data;
circular_queue[front].data = 0;
if (front == rear) {
front = rear = -1; }
else if (front == MAX_SIZE-1) {
front = 0; }
else { front++; }
return element;}
void display() {
if (front == -1) {
printf("Queue is empty.\n");
return; }
printf("Elements in the queue are: ");
if (rear >= front) {
for (int i = front; i<= rear; i++) {
printf("%d ", circular_queue[i].data); } }
else {
for (int i = front; i< MAX_SIZE; i++) {
printf("%d ", circular_queue[i].data); }
for (int i = 0; i<= rear; i++) {
printf("%d ", circular_queue[i].data); } }
printf("\n");}
int main() {
enqueue(10);
enqueue(20);
enqueue(30);
enqueue(40);
enqueue(50);
display();
dequeue();
dequeue();
display();
enqueue(60);
enqueue(70);
display();
return 0;}
